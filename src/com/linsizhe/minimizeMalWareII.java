package com.linsizhe;

import java.util.*;


// problem: https://leetcode.com/problems/minimize-malware-spread-ii/submissions/

// https://buptwc.com/2018/10/21/Leetcode-928-Minimize-Malware-Spread-II/
public class minimizeMalWareII {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph[0].length;
        // record infects that contaminate the node with the only path.
        Map<Integer, List<Integer>> infects = new HashMap();
        for (int i : initial) {
            bfs(graph, i, infects, initial, n);
        }
        int[] counts = new int[n];
        for (int i : infects.keySet()) {
            List<Integer> source = infects.get(i);
            if (source.size() == 1) {
                counts[source.get(0)]++;
            }
        }

        int maxReduce = 0;
        int idx = 0;
        for (int i = 0; i < n; i++) {
            if (counts[i] > maxReduce) {
                maxReduce = counts[i];
                idx = i;
            } else if (counts[i] == maxReduce && i < idx) {
                idx = i;
            }
        }
        return idx;
    }

    public void bfs(int[][] graph, int start, Map<Integer, List<Integer>> infects, int[] initial, int n) {
        LinkedList<Integer> queue = new LinkedList();
        HashSet<Integer> visited = new HashSet();
        queue.add(start);
        for (int i : initial) visited.add(i);
        // very important! if every ecounter another infect source during bfs
        // we stopped. So nodes that infected by the one more nodes from the same path will get only count once
        // by nearest source. (cut that source will still stop infection!!!!)
        while (!queue.isEmpty()) {
            int i = queue.poll();
            infects.putIfAbsent(i, new ArrayList());
            infects.get(i).add(start);
            visited.add(i);
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1 && !visited.contains(j)) {
                    queue.add(j);
                }
            }
        }
    }
}
